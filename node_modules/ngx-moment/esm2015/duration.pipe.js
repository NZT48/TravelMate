import { __decorate, __param } from "tslib";
import * as moment from 'moment';
import { Inject, Optional, Pipe } from '@angular/core';
import { NGX_MOMENT_OPTIONS } from './moment-options';
let DurationPipe = class DurationPipe {
    constructor(momentOptions) {
        this.allowedUnits = ['ss', 's', 'm', 'h', 'd', 'M'];
        this._applyOptions(momentOptions);
    }
    transform(value, ...args) {
        if (typeof args === 'undefined' || args.length !== 1) {
            throw new Error('DurationPipe: missing required time unit argument');
        }
        return moment.duration(value, args[0]).humanize();
    }
    _applyOptions(momentOptions) {
        if (!momentOptions) {
            return;
        }
        if (!!momentOptions.relativeTimeThresholdOptions) {
            const units = Object.keys(momentOptions.relativeTimeThresholdOptions);
            const filteredUnits = units.filter((unit) => this.allowedUnits.indexOf(unit) !== -1);
            filteredUnits.forEach((unit) => {
                moment.relativeTimeThreshold(unit, momentOptions.relativeTimeThresholdOptions[unit]);
            });
        }
    }
};
DurationPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MOMENT_OPTIONS,] }] }
];
DurationPipe = __decorate([
    Pipe({ name: 'amDuration' }),
    __param(0, Optional()), __param(0, Inject(NGX_MOMENT_OPTIONS))
], DurationPipe);
export { DurationPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJkdXJhdGlvbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxrQkFBa0IsRUFBb0IsTUFBTSxrQkFBa0IsQ0FBQztBQUd4RSxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBR3ZCLFlBQW9ELGFBQWdDO1FBRnBGLGlCQUFZLEdBQWtCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUc1RCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBK0IsRUFBRSxHQUFHLElBQWM7UUFDMUQsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUEwQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0YsQ0FBQztJQUVPLGFBQWEsQ0FBQyxhQUErQjtRQUNuRCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsRUFBRTtZQUNoRCxNQUFNLEtBQUssR0FBa0IsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUNyRixNQUFNLGFBQWEsR0FBa0IsS0FBSyxDQUFDLE1BQU0sQ0FDL0MsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNqRCxDQUFDO1lBQ0YsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM3QixNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7NENBMUJjLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCOztBQUh2QyxZQUFZO0lBRHhCLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQztJQUlkLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0dBSHhDLFlBQVksQ0E2QnhCO1NBN0JZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHsgSW5qZWN0LCBPcHRpb25hbCwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYX01PTUVOVF9PUFRJT05TLCBOZ3hNb21lbnRPcHRpb25zIH0gZnJvbSAnLi9tb21lbnQtb3B0aW9ucyc7XG5cbkBQaXBlKHsgbmFtZTogJ2FtRHVyYXRpb24nIH0pXG5leHBvcnQgY2xhc3MgRHVyYXRpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGFsbG93ZWRVbml0czogQXJyYXk8c3RyaW5nPiA9IFsnc3MnLCAncycsICdtJywgJ2gnLCAnZCcsICdNJ107XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOR1hfTU9NRU5UX09QVElPTlMpIG1vbWVudE9wdGlvbnM/OiBOZ3hNb21lbnRPcHRpb25zKSB7XG4gICAgdGhpcy5fYXBwbHlPcHRpb25zKG1vbWVudE9wdGlvbnMpO1xuICB9XG5cbiAgdHJhbnNmb3JtKHZhbHVlOiBtb21lbnQuRHVyYXRpb25JbnB1dEFyZzEsIC4uLmFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICd1bmRlZmluZWQnIHx8IGFyZ3MubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0R1cmF0aW9uUGlwZTogbWlzc2luZyByZXF1aXJlZCB0aW1lIHVuaXQgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vbWVudC5kdXJhdGlvbih2YWx1ZSwgYXJnc1swXSBhcyBtb21lbnQudW5pdE9mVGltZS5EdXJhdGlvbkNvbnN0cnVjdG9yKS5odW1hbml6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXBwbHlPcHRpb25zKG1vbWVudE9wdGlvbnM6IE5neE1vbWVudE9wdGlvbnMpOiB2b2lkIHtcbiAgICBpZiAoIW1vbWVudE9wdGlvbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoISFtb21lbnRPcHRpb25zLnJlbGF0aXZlVGltZVRocmVzaG9sZE9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHVuaXRzOiBBcnJheTxzdHJpbmc+ID0gT2JqZWN0LmtleXMobW9tZW50T3B0aW9ucy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGRPcHRpb25zKTtcbiAgICAgIGNvbnN0IGZpbHRlcmVkVW5pdHM6IEFycmF5PHN0cmluZz4gPSB1bml0cy5maWx0ZXIoXG4gICAgICAgICh1bml0KSA9PiB0aGlzLmFsbG93ZWRVbml0cy5pbmRleE9mKHVuaXQpICE9PSAtMSxcbiAgICAgICk7XG4gICAgICBmaWx0ZXJlZFVuaXRzLmZvckVhY2goKHVuaXQpID0+IHtcbiAgICAgICAgbW9tZW50LnJlbGF0aXZlVGltZVRocmVzaG9sZCh1bml0LCBtb21lbnRPcHRpb25zLnJlbGF0aXZlVGltZVRocmVzaG9sZE9wdGlvbnNbdW5pdF0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=