var MomentModule_1;
import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { NGX_MOMENT_OPTIONS } from './moment-options';
import { AddPipe } from './add.pipe';
import { CalendarPipe } from './calendar.pipe';
import { DateFormatPipe } from './date-format.pipe';
import { DifferencePipe } from './difference.pipe';
import { DurationPipe } from './duration.pipe';
import { FromUnixPipe } from './from-unix.pipe';
import { FromUtcPipe } from './from-utc.pipe';
import { IsAfterPipe } from './is-after.pipe';
import { IsBeforePipe } from './is-before.pipe';
import { LocalTimePipe } from './local.pipe';
import { LocalePipe } from './locale.pipe';
import { ParsePipe } from './parse.pipe';
import { ParseZonePipe } from './parse-zone.pipe';
import { SubtractPipe } from './subtract.pipe';
import { TimeAgoPipe } from './time-ago.pipe';
import { UtcPipe } from './utc.pipe';
const ANGULAR_MOMENT_PIPES = [
    AddPipe,
    CalendarPipe,
    DateFormatPipe,
    DifferencePipe,
    DurationPipe,
    FromUnixPipe,
    ParsePipe,
    SubtractPipe,
    TimeAgoPipe,
    UtcPipe,
    FromUtcPipe,
    LocalTimePipe,
    LocalePipe,
    ParseZonePipe,
    IsBeforePipe,
    IsAfterPipe,
];
let MomentModule = MomentModule_1 = class MomentModule {
    static forRoot(options) {
        return {
            ngModule: MomentModule_1,
            providers: [
                {
                    provide: NGX_MOMENT_OPTIONS,
                    useValue: Object.assign({}, options),
                },
            ],
        };
    }
};
MomentModule = MomentModule_1 = __decorate([
    NgModule({
        declarations: ANGULAR_MOMENT_PIPES,
        exports: ANGULAR_MOMENT_PIPES,
    })
], MomentModule);
export { MomentModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJtb21lbnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFvQixNQUFNLGtCQUFrQixDQUFDO0FBRXhFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXJDLE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsT0FBTztJQUNQLFlBQVk7SUFDWixjQUFjO0lBQ2QsY0FBYztJQUNkLFlBQVk7SUFDWixZQUFZO0lBQ1osU0FBUztJQUNULFlBQVk7SUFDWixXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxhQUFhO0lBQ2IsVUFBVTtJQUNWLGFBQWE7SUFDYixZQUFZO0lBQ1osV0FBVztDQUNaLENBQUM7QUFNRixJQUFhLFlBQVksb0JBQXpCLE1BQWEsWUFBWTtJQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQTBCO1FBQ3ZDLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGtCQUFrQjtvQkFDM0IsUUFBUSxvQkFDSCxPQUFPLENBQ1g7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQWRZLFlBQVk7SUFKeEIsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLG9CQUFvQjtRQUNsQyxPQUFPLEVBQUUsb0JBQW9CO0tBQzlCLENBQUM7R0FDVyxZQUFZLENBY3hCO1NBZFksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR1hfTU9NRU5UX09QVElPTlMsIE5neE1vbWVudE9wdGlvbnMgfSBmcm9tICcuL21vbWVudC1vcHRpb25zJztcblxuaW1wb3J0IHsgQWRkUGlwZSB9IGZyb20gJy4vYWRkLnBpcGUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJQaXBlIH0gZnJvbSAnLi9jYWxlbmRhci5waXBlJztcbmltcG9ydCB7IERhdGVGb3JtYXRQaXBlIH0gZnJvbSAnLi9kYXRlLWZvcm1hdC5waXBlJztcbmltcG9ydCB7IERpZmZlcmVuY2VQaXBlIH0gZnJvbSAnLi9kaWZmZXJlbmNlLnBpcGUnO1xuaW1wb3J0IHsgRHVyYXRpb25QaXBlIH0gZnJvbSAnLi9kdXJhdGlvbi5waXBlJztcbmltcG9ydCB7IEZyb21Vbml4UGlwZSB9IGZyb20gJy4vZnJvbS11bml4LnBpcGUnO1xuaW1wb3J0IHsgRnJvbVV0Y1BpcGUgfSBmcm9tICcuL2Zyb20tdXRjLnBpcGUnO1xuaW1wb3J0IHsgSXNBZnRlclBpcGUgfSBmcm9tICcuL2lzLWFmdGVyLnBpcGUnO1xuaW1wb3J0IHsgSXNCZWZvcmVQaXBlIH0gZnJvbSAnLi9pcy1iZWZvcmUucGlwZSc7XG5pbXBvcnQgeyBMb2NhbFRpbWVQaXBlIH0gZnJvbSAnLi9sb2NhbC5waXBlJztcbmltcG9ydCB7IExvY2FsZVBpcGUgfSBmcm9tICcuL2xvY2FsZS5waXBlJztcbmltcG9ydCB7IFBhcnNlUGlwZSB9IGZyb20gJy4vcGFyc2UucGlwZSc7XG5pbXBvcnQgeyBQYXJzZVpvbmVQaXBlIH0gZnJvbSAnLi9wYXJzZS16b25lLnBpcGUnO1xuaW1wb3J0IHsgU3VidHJhY3RQaXBlIH0gZnJvbSAnLi9zdWJ0cmFjdC5waXBlJztcbmltcG9ydCB7IFRpbWVBZ29QaXBlIH0gZnJvbSAnLi90aW1lLWFnby5waXBlJztcbmltcG9ydCB7IFV0Y1BpcGUgfSBmcm9tICcuL3V0Yy5waXBlJztcblxuY29uc3QgQU5HVUxBUl9NT01FTlRfUElQRVMgPSBbXG4gIEFkZFBpcGUsXG4gIENhbGVuZGFyUGlwZSxcbiAgRGF0ZUZvcm1hdFBpcGUsXG4gIERpZmZlcmVuY2VQaXBlLFxuICBEdXJhdGlvblBpcGUsXG4gIEZyb21Vbml4UGlwZSxcbiAgUGFyc2VQaXBlLFxuICBTdWJ0cmFjdFBpcGUsXG4gIFRpbWVBZ29QaXBlLFxuICBVdGNQaXBlLFxuICBGcm9tVXRjUGlwZSxcbiAgTG9jYWxUaW1lUGlwZSxcbiAgTG9jYWxlUGlwZSxcbiAgUGFyc2Vab25lUGlwZSxcbiAgSXNCZWZvcmVQaXBlLFxuICBJc0FmdGVyUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQU5HVUxBUl9NT01FTlRfUElQRVMsXG4gIGV4cG9ydHM6IEFOR1VMQVJfTU9NRU5UX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBNb21lbnRNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChvcHRpb25zPzogTmd4TW9tZW50T3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTW9tZW50TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOR1hfTU9NRU5UX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19