import { __decorate, __param } from 'tslib';
import { Pipe, EventEmitter, ChangeDetectorRef, NgZone, InjectionToken, Optional, Inject, NgModule } from '@angular/core';
import * as moment from 'moment';
import { isMoment, duration, relativeTimeThreshold, unix, utc, parseZone, isDate, locale } from 'moment';

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
const momentConstructor = moment;
let AddPipe = class AddPipe {
    transform(value, amount, unit) {
        if (typeof amount === 'undefined' ||
            (typeof amount === 'number' && typeof unit === 'undefined')) {
            throw new Error('AddPipe: missing required arguments');
        }
        return momentConstructor(value).add(amount, unit);
    }
};
AddPipe = __decorate([
    Pipe({ name: 'amAdd' })
], AddPipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
var CalendarPipe_1;
const momentConstructor$1 = moment;
let CalendarPipe = CalendarPipe_1 = class CalendarPipe {
    constructor(cdRef, ngZone) {
        this.cdRef = cdRef;
        this.ngZone = ngZone;
        // using a single static timer for all instances of this pipe for performance reasons
        CalendarPipe_1.initTimer(ngZone);
        CalendarPipe_1.refs++;
        // values such as Today will need to be replaced with Yesterday after midnight,
        // so make sure we subscribe to an EventEmitter that we set up to emit at midnight
        this.midnightSub = CalendarPipe_1.midnight.subscribe(() => {
            this.ngZone.run(() => this.cdRef.markForCheck());
        });
    }
    transform(value, ...args) {
        let formats = null;
        let referenceTime = null;
        for (let i = 0, len = args.length; i < len; i++) {
            if (args[i] !== null) {
                if (typeof args[i] === 'object' && !isMoment(args[i])) {
                    formats = args[i];
                }
                else {
                    referenceTime = momentConstructor$1(args[i]);
                }
            }
        }
        return momentConstructor$1(value).calendar(referenceTime, formats);
    }
    ngOnDestroy() {
        if (CalendarPipe_1.refs > 0) {
            CalendarPipe_1.refs--;
        }
        if (CalendarPipe_1.refs === 0) {
            CalendarPipe_1.removeTimer();
        }
        this.midnightSub.unsubscribe();
    }
    static initTimer(ngZone) {
        // initialize the timer
        if (!CalendarPipe_1.midnight) {
            CalendarPipe_1.midnight = new EventEmitter();
            if (typeof window !== 'undefined') {
                const timeToUpdate = CalendarPipe_1._getMillisecondsUntilUpdate();
                CalendarPipe_1.timer = ngZone.runOutsideAngular(() => {
                    return window.setTimeout(() => {
                        // emit the current date
                        CalendarPipe_1.midnight.emit(new Date());
                        // refresh the timer
                        CalendarPipe_1.removeTimer();
                        CalendarPipe_1.initTimer(ngZone);
                    }, timeToUpdate);
                });
            }
        }
    }
    static removeTimer() {
        if (CalendarPipe_1.timer) {
            window.clearTimeout(CalendarPipe_1.timer);
            CalendarPipe_1.timer = null;
            CalendarPipe_1.midnight = null;
        }
    }
    static _getMillisecondsUntilUpdate() {
        const now = momentConstructor$1();
        const tomorrow = momentConstructor$1().startOf('day').add(1, 'days');
        const timeToMidnight = tomorrow.valueOf() - now.valueOf();
        return timeToMidnight + 1000; // 1 second after midnight
    }
};
/**
 * Internal reference counter, so we can clean up when no instances are in use
 */
CalendarPipe.refs = 0;
CalendarPipe.timer = null;
CalendarPipe.midnight = null;
CalendarPipe.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
CalendarPipe = CalendarPipe_1 = __decorate([
    Pipe({ name: 'amCalendar', pure: false })
], CalendarPipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
const momentConstructor$2 = moment;
let DateFormatPipe = class DateFormatPipe {
    transform(value, ...args) {
        if (!value) {
            return '';
        }
        return momentConstructor$2(value).format(args[0]);
    }
};
DateFormatPipe = __decorate([
    Pipe({ name: 'amDateFormat' })
], DateFormatPipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
const momentConstructor$3 = moment;
let DifferencePipe = class DifferencePipe {
    transform(value, otherValue, unit, precision) {
        const date = momentConstructor$3(value);
        const date2 = otherValue !== null ? momentConstructor$3(otherValue) : momentConstructor$3();
        return date.diff(date2, unit, precision);
    }
};
DifferencePipe = __decorate([
    Pipe({ name: 'amDifference' })
], DifferencePipe);

const NGX_MOMENT_OPTIONS = new InjectionToken('NGX_MOMENT_OPTIONS');

let DurationPipe = class DurationPipe {
    constructor(momentOptions) {
        this.allowedUnits = ['ss', 's', 'm', 'h', 'd', 'M'];
        this._applyOptions(momentOptions);
    }
    transform(value, ...args) {
        if (typeof args === 'undefined' || args.length !== 1) {
            throw new Error('DurationPipe: missing required time unit argument');
        }
        return duration(value, args[0]).humanize();
    }
    _applyOptions(momentOptions) {
        if (!momentOptions) {
            return;
        }
        if (!!momentOptions.relativeTimeThresholdOptions) {
            const units = Object.keys(momentOptions.relativeTimeThresholdOptions);
            const filteredUnits = units.filter((unit) => this.allowedUnits.indexOf(unit) !== -1);
            filteredUnits.forEach((unit) => {
                relativeTimeThreshold(unit, momentOptions.relativeTimeThresholdOptions[unit]);
            });
        }
    }
};
DurationPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MOMENT_OPTIONS,] }] }
];
DurationPipe = __decorate([
    Pipe({ name: 'amDuration' }),
    __param(0, Optional()), __param(0, Inject(NGX_MOMENT_OPTIONS))
], DurationPipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
let FromUnixPipe = class FromUnixPipe {
    transform(value, ...args) {
        return typeof value === 'string' ? unix(parseInt(value, 10)) : unix(value);
    }
};
FromUnixPipe = __decorate([
    Pipe({ name: 'amFromUnix' })
], FromUnixPipe);

const momentConstructor$4 = moment;
let ParsePipe = class ParsePipe {
    transform(value, formats) {
        return momentConstructor$4(value, formats);
    }
};
ParsePipe = __decorate([
    Pipe({ name: 'amParse' })
], ParsePipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
let FromUtcPipe = class FromUtcPipe {
    transform(value, formats, ...args) {
        return formats ? utc(value, formats) : utc(value);
    }
};
FromUtcPipe = __decorate([
    Pipe({ name: 'amFromUtc' })
], FromUtcPipe);

const momentConstructor$5 = moment;
let IsAfterPipe = class IsAfterPipe {
    transform(value, otherValue, unit) {
        return momentConstructor$5(value).isAfter(momentConstructor$5(otherValue), unit);
    }
};
IsAfterPipe = __decorate([
    Pipe({
        name: 'amIsAfter',
    })
], IsAfterPipe);

const momentConstructor$6 = moment;
let IsBeforePipe = class IsBeforePipe {
    transform(value, otherValue, unit) {
        return momentConstructor$6(value).isBefore(momentConstructor$6(otherValue), unit);
    }
};
IsBeforePipe = __decorate([
    Pipe({
        name: 'amIsBefore',
    })
], IsBeforePipe);

const momentConstructor$7 = moment;
let LocalTimePipe = class LocalTimePipe {
    transform(value) {
        return momentConstructor$7(value).local();
    }
};
LocalTimePipe = __decorate([
    Pipe({ name: 'amLocal' })
], LocalTimePipe);

// See https://github.com/ng-packagr/ng-packagr/issues/217 for why this is needed:
const momentConstructor$8 = moment;
let LocalePipe = class LocalePipe {
    transform(value, locale) {
        return momentConstructor$8(value).locale(locale);
    }
};
LocalePipe = __decorate([
    Pipe({ name: 'amLocale' })
], LocalePipe);

let ParseZonePipe = class ParseZonePipe {
    transform(value) {
        return parseZone(value);
    }
};
ParseZonePipe = __decorate([
    Pipe({ name: 'amParseZone' })
], ParseZonePipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
const momentConstructor$9 = moment;
let SubtractPipe = class SubtractPipe {
    transform(value, amount, unit) {
        if (typeof amount === 'undefined' ||
            (typeof amount === 'number' && typeof unit === 'undefined')) {
            throw new Error('SubtractPipe: missing required arguments');
        }
        return momentConstructor$9(value).subtract(amount, unit);
    }
};
SubtractPipe = __decorate([
    Pipe({ name: 'amSubtract' })
], SubtractPipe);

/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
const momentConstructor$a = moment;
let TimeAgoPipe = class TimeAgoPipe {
    constructor(cdRef, ngZone) {
        this.cdRef = cdRef;
        this.ngZone = ngZone;
    }
    format(m) {
        return m.from(momentConstructor$a(), this.lastOmitSuffix);
    }
    transform(value, omitSuffix, formatFn) {
        if (this.hasChanged(value, omitSuffix)) {
            this.lastTime = this.getTime(value);
            this.lastValue = value;
            this.lastOmitSuffix = omitSuffix;
            this.lastLocale = this.getLocale(value);
            this.formatFn = formatFn || this.format.bind(this);
            this.removeTimer();
            this.createTimer();
            this.lastText = this.formatFn(momentConstructor$a(value));
        }
        else {
            this.createTimer();
        }
        return this.lastText;
    }
    ngOnDestroy() {
        this.removeTimer();
    }
    createTimer() {
        if (this.currentTimer) {
            return;
        }
        const momentInstance = momentConstructor$a(this.lastValue);
        const timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
        this.currentTimer = this.ngZone.runOutsideAngular(() => {
            if (typeof window !== 'undefined') {
                return window.setTimeout(() => {
                    this.lastText = this.formatFn(momentConstructor$a(this.lastValue));
                    this.currentTimer = null;
                    this.ngZone.run(() => this.cdRef.markForCheck());
                }, timeToUpdate);
            }
            else {
                return null;
            }
        });
    }
    removeTimer() {
        if (this.currentTimer) {
            window.clearTimeout(this.currentTimer);
            this.currentTimer = null;
        }
    }
    getSecondsUntilUpdate(momentInstance) {
        const howOld = Math.abs(momentConstructor$a().diff(momentInstance, 'minute'));
        if (howOld < 1) {
            return 1;
        }
        else if (howOld < 60) {
            return 30;
        }
        else if (howOld < 180) {
            return 300;
        }
        else {
            return 3600;
        }
    }
    hasChanged(value, omitSuffix) {
        return (this.getTime(value) !== this.lastTime ||
            this.getLocale(value) !== this.lastLocale ||
            omitSuffix !== this.lastOmitSuffix);
    }
    getTime(value) {
        if (isDate(value)) {
            return value.getTime();
        }
        else if (isMoment(value)) {
            return value.valueOf();
        }
        else {
            return momentConstructor$a(value).valueOf();
        }
    }
    getLocale(value) {
        return isMoment(value) ? value.locale() : locale();
    }
};
TimeAgoPipe.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
TimeAgoPipe = __decorate([
    Pipe({ name: 'amTimeAgo', pure: false })
], TimeAgoPipe);

const momentConstructor$b = moment;
let UtcPipe = class UtcPipe {
    transform(value) {
        return momentConstructor$b(value).utc();
    }
};
UtcPipe = __decorate([
    Pipe({ name: 'amUtc' })
], UtcPipe);

var MomentModule_1;
const ANGULAR_MOMENT_PIPES = [
    AddPipe,
    CalendarPipe,
    DateFormatPipe,
    DifferencePipe,
    DurationPipe,
    FromUnixPipe,
    ParsePipe,
    SubtractPipe,
    TimeAgoPipe,
    UtcPipe,
    FromUtcPipe,
    LocalTimePipe,
    LocalePipe,
    ParseZonePipe,
    IsBeforePipe,
    IsAfterPipe,
];
let MomentModule = MomentModule_1 = class MomentModule {
    static forRoot(options) {
        return {
            ngModule: MomentModule_1,
            providers: [
                {
                    provide: NGX_MOMENT_OPTIONS,
                    useValue: Object.assign({}, options),
                },
            ],
        };
    }
};
MomentModule = MomentModule_1 = __decorate([
    NgModule({
        declarations: ANGULAR_MOMENT_PIPES,
        exports: ANGULAR_MOMENT_PIPES,
    })
], MomentModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AddPipe, CalendarPipe, DateFormatPipe, DifferencePipe, DurationPipe, FromUnixPipe, FromUtcPipe, IsAfterPipe, IsBeforePipe, LocalTimePipe, LocalePipe, MomentModule, NGX_MOMENT_OPTIONS, ParsePipe, ParseZonePipe, SubtractPipe, TimeAgoPipe, UtcPipe };
//# sourceMappingURL=ngx-moment.js.map
